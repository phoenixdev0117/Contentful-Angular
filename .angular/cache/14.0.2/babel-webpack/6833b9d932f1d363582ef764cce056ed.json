{"ast":null,"code":"import _classCallCheck from \"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isDevMode } from '@angular/core';\nimport { createClient } from 'contentful';\nimport * as i0 from \"@angular/core\"; // change these to include your own settings\n\nvar DEFAULT_CONFIG = {\n  credentials: {\n    space: '5u403xny70b7',\n    accessToken: isDevMode ? 'kkQ9luy61vXX90CQrIMGH3sU_w6dmwZo7-4dxkQ1Lf4' : 'CYQDNUgaBV4fdePBW8MGMJT32iE-Tcubo823Q0Gtu9w'\n  },\n  contentTypeIds: {\n    product: 'product',\n    category: 'category'\n  }\n};\nexport var ContentfulService = /*#__PURE__*/(function () {\n  var ContentfulService = /*#__PURE__*/function () {\n    function ContentfulService() {\n      _classCallCheck(this, ContentfulService);\n\n      try {\n        this.config = JSON.parse(localStorage.catalogConfig);\n      } catch (e) {\n        this.config = DEFAULT_CONFIG.credentials;\n      }\n\n      this.titleHandlers = [];\n\n      this._createClient();\n\n      this.getSpace();\n    }\n\n    _createClass(ContentfulService, [{\n      key: \"onTitleChange\",\n      value: function onTitleChange(fn) {\n        this.titleHandlers.push(fn);\n      } // get the current space\n\n    }, {\n      key: \"getSpace\",\n      value: function getSpace() {\n        var _this = this;\n\n        return this.cdaClient.getSpace().then(function (space) {\n          _this.titleHandlers.forEach(function (handler) {\n            return handler(space.name);\n          });\n\n          return space;\n        });\n      } // fetch products\n\n    }, {\n      key: \"getProducts\",\n      value: function getProducts(query) {\n        return this.cdaClient.getEntries(Object.assign({\n          content_type: DEFAULT_CONFIG.contentTypeIds.product\n        }, query)).then(function (res) {\n          return res.items;\n        });\n      } // fetch products with a given slug\n      // and return one of them\n\n    }, {\n      key: \"getProduct\",\n      value: function getProduct(slug) {\n        return this.getProducts({\n          'fields.slug': slug\n        }).then(function (items) {\n          return items[0];\n        });\n      } // fetch categories\n\n    }, {\n      key: \"getCategories\",\n      value: function getCategories() {\n        return this.cdaClient.getEntries({\n          content_type: DEFAULT_CONFIG.contentTypeIds.category\n        }).then(function (res) {\n          return res.items;\n        });\n      } // return a custom config if available\n\n    }, {\n      key: \"getConfig\",\n      value: function getConfig() {\n        return this.config !== DEFAULT_CONFIG.credentials ? Object.assign({}, this.config) : {\n          space: '',\n          accessToken: ''\n        };\n      } // set a new config and store it in localStorage\n\n    }, {\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        localStorage.setItem('catalogConfig', JSON.stringify(config));\n        this.config = config;\n\n        this._createClient();\n\n        this.getSpace();\n        return Object.assign({}, this.config);\n      } // set config back to default values\n\n    }, {\n      key: \"resetConfig\",\n      value: function resetConfig() {\n        localStorage.removeItem('catalogConfig');\n        this.config = DEFAULT_CONFIG.credentials;\n\n        this._createClient();\n\n        this.getSpace();\n        return Object.assign({}, this.config);\n      }\n    }, {\n      key: \"_createClient\",\n      value: function _createClient() {\n        this.cdaClient = createClient({\n          space: this.config.space,\n          accessToken: this.config.accessToken,\n          host: isDevMode ? 'preview.contentful.com' : 'cdn.contentful.com'\n        });\n      }\n    }]);\n\n    return ContentfulService;\n  }();\n\n  ContentfulService.ɵfac = function ContentfulService_Factory(t) {\n    return new (t || ContentfulService)();\n  };\n\n  ContentfulService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContentfulService,\n    factory: ContentfulService.ɵfac\n  });\n  return ContentfulService;\n})();","map":null,"metadata":{},"sourceType":"module"}