{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _inherits = require(\"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _wrapNativeSuper = require(\"/Users/jkeyes/Development/stackbit/stackbit-angular-contentful/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = void 0;\nexports.default = validateTimestamp;\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  function ValidationError(name, message) {\n    var _this;\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this, \"Invalid \\\"\".concat(name, \"\\\" provided, \") + message);\n    _this.name = 'ValidationError';\n    return _this;\n  }\n\n  return _createClass(ValidationError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.ValidationError = ValidationError;\n\nfunction validateTimestamp(name, timestamp, options) {\n  options = options || {};\n\n  if (typeof timestamp !== 'number') {\n    throw new ValidationError(name, \"only numeric values are allowed for timestamps, provided type was \\\"\".concat(typeof timestamp, \"\\\"\"));\n  }\n\n  if (options.maximum && timestamp > options.maximum) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be further in the future than expected maximum (\").concat(options.maximum, \")\"));\n  }\n\n  if (options.now && timestamp < options.now) {\n    throw new ValidationError(name, \"value (\".concat(timestamp, \") cannot be in the past, current time was \").concat(options.now));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}