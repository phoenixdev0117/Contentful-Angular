{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global[\"fast-copy\"] = factory());\n})(this, function () {\n  'use strict';\n\n  var toStringFunction = Function.prototype.toString;\n  var create = Object.create,\n      defineProperty = Object.defineProperty,\n      getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor,\n      getOwnPropertyNames = Object.getOwnPropertyNames,\n      getOwnPropertySymbols = Object.getOwnPropertySymbols,\n      getPrototypeOf$1 = Object.getPrototypeOf;\n  var _a = Object.prototype,\n      hasOwnProperty = _a.hasOwnProperty,\n      propertyIsEnumerable = _a.propertyIsEnumerable;\n  var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === 'function';\n  var WEAK_MAP = typeof WeakMap === 'function';\n  /**\n   * @function createCache\n   *\n   * @description\n   * get a new cache object to prevent circular references\n   *\n   * @returns the new cache object\n   */\n\n  var createCache = function () {\n    if (WEAK_MAP) {\n      return function () {\n        return new WeakMap();\n      };\n    }\n\n    var Cache =\n    /** @class */\n    function () {\n      function Cache() {\n        this._keys = [];\n        this._values = [];\n      }\n\n      Cache.prototype.has = function (key) {\n        return !!~this._keys.indexOf(key);\n      };\n\n      Cache.prototype.get = function (key) {\n        return this._values[this._keys.indexOf(key)];\n      };\n\n      Cache.prototype.set = function (key, value) {\n        this._keys.push(key);\n\n        this._values.push(value);\n      };\n\n      return Cache;\n    }();\n\n    return function () {\n      return new Cache();\n    };\n  }();\n  /**\n   * @function getCleanClone\n   *\n   * @description\n   * get an empty version of the object with the same prototype it has\n   *\n   * @param object the object to build a clean clone from\n   * @param realm the realm the object resides in\n   * @returns the empty cloned object\n   */\n\n\n  var getCleanClone = function getCleanClone(object, realm) {\n    var prototype = object.__proto__ || getPrototypeOf$1(object);\n\n    if (!prototype) {\n      return create(null);\n    }\n\n    var Constructor = prototype.constructor;\n\n    if (Constructor === realm.Object) {\n      return prototype === realm.Object.prototype ? {} : create(prototype);\n    }\n\n    if (~toStringFunction.call(Constructor).indexOf('[native code]')) {\n      try {\n        return new Constructor();\n      } catch (_a) {}\n    }\n\n    return create(prototype);\n  };\n  /**\n   * @function getObjectCloneLoose\n   *\n   * @description\n   * get a copy of the object based on loose rules, meaning all enumerable keys\n   * and symbols are copied, but property descriptors are not considered\n   *\n   * @param object the object to clone\n   * @param realm the realm the object resides in\n   * @param handleCopy the function that handles copying the object\n   * @returns the copied object\n   */\n\n\n  var getObjectCloneLoose = function getObjectCloneLoose(object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively\n\n    cache.set(object, clone);\n\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        clone[key] = handleCopy(object[key], cache);\n      }\n    }\n\n    if (SYMBOL_PROPERTIES) {\n      var symbols = getOwnPropertySymbols(object);\n\n      for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {\n        symbol = symbols[index];\n\n        if (propertyIsEnumerable.call(object, symbol)) {\n          clone[symbol] = handleCopy(object[symbol], cache);\n        }\n      }\n    }\n\n    return clone;\n  };\n  /**\n   * @function getObjectCloneStrict\n   *\n   * @description\n   * get a copy of the object based on strict rules, meaning all keys and symbols\n   * are copied based on the original property descriptors\n   *\n   * @param object the object to clone\n   * @param realm the realm the object resides in\n   * @param handleCopy the function that handles copying the object\n   * @returns the copied object\n   */\n\n\n  var getObjectCloneStrict = function getObjectCloneStrict(object, realm, handleCopy, cache) {\n    var clone = getCleanClone(object, realm); // set in the cache immediately to be able to reuse the object recursively\n\n    cache.set(object, clone);\n    var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);\n\n    for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {\n      property = properties[index];\n\n      if (property !== 'callee' && property !== 'caller') {\n        descriptor = getOwnPropertyDescriptor(object, property);\n\n        if (descriptor) {\n          // Only clone the value if actually a value, not a getter / setter.\n          if (!descriptor.get && !descriptor.set) {\n            descriptor.value = handleCopy(object[property], cache);\n          }\n\n          try {\n            defineProperty(clone, property, descriptor);\n          } catch (error) {\n            // Tee above can fail on node in edge cases, so fall back to the loose assignment.\n            clone[property] = descriptor.value;\n          }\n        } else {\n          // In extra edge cases where the property descriptor cannot be retrived, fall back to\n          // the loose assignment.\n          clone[property] = handleCopy(object[property], cache);\n        }\n      }\n    }\n\n    return clone;\n  };\n  /**\n   * @function getRegExpFlags\n   *\n   * @description\n   * get the flags to apply to the copied regexp\n   *\n   * @param regExp the regexp to get the flags of\n   * @returns the flags for the regexp\n   */\n\n\n  var getRegExpFlags = function getRegExpFlags(regExp) {\n    var flags = '';\n\n    if (regExp.global) {\n      flags += 'g';\n    }\n\n    if (regExp.ignoreCase) {\n      flags += 'i';\n    }\n\n    if (regExp.multiline) {\n      flags += 'm';\n    }\n\n    if (regExp.unicode) {\n      flags += 'u';\n    }\n\n    if (regExp.sticky) {\n      flags += 'y';\n    }\n\n    return flags;\n  }; // utils\n\n\n  var isArray = Array.isArray;\n  var getPrototypeOf = Object.getPrototypeOf;\n\n  var GLOBAL_THIS = function () {\n    if (typeof globalThis !== 'undefined') {\n      return globalThis;\n    }\n\n    if (typeof self !== 'undefined') {\n      return self;\n    }\n\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n\n    if (typeof global !== 'undefined') {\n      return global;\n    }\n\n    if (console && console.error) {\n      console.error('Unable to locate global object, returning \"this\".');\n    }\n\n    return this;\n  }();\n  /**\n   * @function copy\n   *\n   * @description\n   * copy an value deeply as much as possible\n   *\n   * If `strict` is applied, then all properties (including non-enumerable ones)\n   * are copied with their original property descriptors on both objects and arrays.\n   *\n   * The value is compared to the global constructors in the `realm` provided,\n   * and the native constructor is always used to ensure that extensions of native\n   * objects (allows in ES2015+) are maintained.\n   *\n   * @param value the value to copy\n   * @param [options] the options for copying with\n   * @param [options.isStrict] should the copy be strict\n   * @param [options.realm] the realm (this) value the value is copied from\n   * @returns the copied value\n   */\n\n\n  function copy(value, options) {\n    // manually coalesced instead of default parameters for performance\n    var isStrict = !!(options && options.isStrict);\n    var realm = options && options.realm || GLOBAL_THIS;\n    var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;\n    /**\n     * @function handleCopy\n     *\n     * @description\n     * copy the value recursively based on its type\n     *\n     * @param value the value to copy\n     * @returns the copied value\n     */\n\n    var handleCopy = function handleCopy(value, cache) {\n      if (!value || typeof value !== 'object') {\n        return value;\n      }\n\n      if (cache.has(value)) {\n        return cache.get(value);\n      }\n\n      var prototype = value.__proto__ || getPrototypeOf(value);\n      var Constructor = prototype && prototype.constructor; // plain objects\n\n      if (!Constructor || Constructor === realm.Object) {\n        return getObjectClone(value, realm, handleCopy, cache);\n      }\n\n      var clone; // arrays\n\n      if (isArray(value)) {\n        // if strict, include non-standard properties\n        if (isStrict) {\n          return getObjectCloneStrict(value, realm, handleCopy, cache);\n        }\n\n        clone = new Constructor();\n        cache.set(value, clone);\n\n        for (var index = 0, length_1 = value.length; index < length_1; ++index) {\n          clone[index] = handleCopy(value[index], cache);\n        }\n\n        return clone;\n      } // dates\n\n\n      if (value instanceof realm.Date) {\n        return new Constructor(value.getTime());\n      } // regexps\n\n\n      if (value instanceof realm.RegExp) {\n        clone = new Constructor(value.source, value.flags || getRegExpFlags(value));\n        clone.lastIndex = value.lastIndex;\n        return clone;\n      } // maps\n\n\n      if (realm.Map && value instanceof realm.Map) {\n        clone = new Constructor();\n        cache.set(value, clone);\n        value.forEach(function (value, key) {\n          clone.set(key, handleCopy(value, cache));\n        });\n        return clone;\n      } // sets\n\n\n      if (realm.Set && value instanceof realm.Set) {\n        clone = new Constructor();\n        cache.set(value, clone);\n        value.forEach(function (value) {\n          clone.add(handleCopy(value, cache));\n        });\n        return clone;\n      } // blobs\n\n\n      if (realm.Blob && value instanceof realm.Blob) {\n        return value.slice(0, value.size, value.type);\n      } // buffers (node-only)\n\n\n      if (realm.Buffer && realm.Buffer.isBuffer(value)) {\n        clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value.length) : new Constructor(value.length);\n        cache.set(value, clone);\n        value.copy(clone);\n        return clone;\n      } // arraybuffers / dataviews\n\n\n      if (realm.ArrayBuffer) {\n        // dataviews\n        if (realm.ArrayBuffer.isView(value)) {\n          clone = new Constructor(value.buffer.slice(0));\n          cache.set(value, clone);\n          return clone;\n        } // arraybuffers\n\n\n        if (value instanceof realm.ArrayBuffer) {\n          clone = value.slice(0);\n          cache.set(value, clone);\n          return clone;\n        }\n      } // if the value cannot / should not be cloned, don't\n\n\n      if ( // promise-like\n      typeof value.then === 'function' || // errors\n      value instanceof Error || // weakmaps\n      realm.WeakMap && value instanceof realm.WeakMap || // weaksets\n      realm.WeakSet && value instanceof realm.WeakSet) {\n        return value;\n      } // assume anything left is a custom constructor\n\n\n      return getObjectClone(value, realm, handleCopy, cache);\n    };\n\n    return handleCopy(value, createCache());\n  } // Adding reference to allow usage in CommonJS libraries compiled using TSC, which\n  // expects there to be a default property on the exported value. See\n  // [#37](https://github.com/planttheidea/fast-copy/issues/37) for details.\n\n\n  copy.default = copy;\n  /**\n   * @function strictCopy\n   *\n   * @description\n   * copy the value with `strict` option pre-applied\n   *\n   * @param value the value to copy\n   * @param [options] the options for copying with\n   * @param [options.realm] the realm (this) value the value is copied from\n   * @returns the copied value\n   */\n\n  copy.strict = function strictCopy(value, options) {\n    return copy(value, {\n      isStrict: true,\n      realm: options ? options.realm : void 0\n    });\n  };\n\n  return copy;\n}); //# sourceMappingURL=fast-copy.js.map","map":null,"metadata":{},"sourceType":"script"}